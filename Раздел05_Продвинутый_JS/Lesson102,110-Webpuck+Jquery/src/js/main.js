// Webpack. Сборщик модулей. Собираем наш проект

// Модули CommonJS
function myModule() {
    this.hello = function() {
        console.log('hello');
    };
    this.goodbye = function() {
        console.log('bye');
    };
}
// Нам ну чтобы фун-я выше перешла из теущего файла(main.js) в index.js где мы ее сможем испол-ть много раз
// Далее испол-м синксис CommonJS. Ниже обратимся к объекту module, у кот-го есть св-во exports
// И в него мы помещаем то что хочем экспортировать
module.exports = myModule;








//  CommonJS — это добровольная рабочая группа, которая проектирует, прототипирует и стандартизирует различные JavaScript API. 
// На сегодняшний день они ратифицировали стандарты для модулей и пакетов — CommonJS определяют простой API для написания 
// модулей, которые могут быть использованы в браузере с помощью тега <script>, как с синхронной, так и с асинхронной загрузкой.
// В структурном плане, CommonJS-модуль представляет собой готовый к переиспользованию фрагмент JavaScript-кода, который 
// экспортирует специальные объекты, доступные для использования в любом зависимом коде. CommonJS все чаще используется как 
// стандартный формат JavaScript-модулей. Существует большое количество уроков по написанию CommonJS-модулей, но обычно они 
// описывают две главных идеи: 
// - объект exports, содержащий то, что модуль хочет сделать доступным для других частей системы, и 
// - функцию require, которая используется одними модулями для импорта объекта exports из других.

// Установка Webpack. Данные с оф. сайта по установке
// Все эти команды не нужно выполнять. Опишу каждую поподробнее:
// mkdir webpack-demo - создает новую папку внутри текущей с названием webpack-demo (нам это не нужно)
// cd webpack-demo - мы в терминале заходим в эту папку (тоже не нужно)
// npm init -y - инициализация проекта (не нужно)
// npm install webpack webpack-cli --save-dev - команда по установке webpack, нам пригодится!
// webpack.config.js - это наш конфигурац-й файл
// Далее выполним: npx webpack
