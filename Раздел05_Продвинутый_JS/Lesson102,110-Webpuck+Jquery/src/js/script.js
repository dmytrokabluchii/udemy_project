import $ from 'jquery';
// Webpack. Сборщик модулей. Собираем наш проект

// Импортируем фун-ю с main.js
// испол-м синтаксис фун-и require, которая импоритирует код, где в () укажем путь к файлу, без .js
// Т.к. далее сборщик Webpack сам поймет что за файл ему нужно испол-ть!
const myNewModule = require('./main');

// Далее мы создадим объект с нашей функ-й
const myModuleInstance = new myNewModule();
// и теперь мы сможем испол-ть методы фун-и из main.js
myModuleInstance.hello();
myModuleInstance.goodbye();

// Браузер не может собирать модули самостоятельно, и в текущем виде просто выдаст ошибку что он не знает фун-и require
// Любая модульная система должна быть собрана в один результирующий файл, и для сборки модулей нам и поможет сборщик Webpack!
// Он может не только собирать скрипты в кучу, но и конфигурировать наш проект, обраб-ть стили, картинки, формир-ть папки и тд
// При этом GULP - это планировщик задач, при помощи него мы можем собирать разные "таски"(tasks - задачи), кот-е выпол-ся
// в различных обстоят-х, сам по себе он не может собирать скрипты, обраб-ть изобр-я и тд, он лиш подкл-т к себе определ-е
// модули и запускает определ-е задачи когды мы это требуем.
// Webpack - это как раз сборщик модулей, мы его настраиваем и запускаем что бы он собирал проект и эти технологии, 
// GULP и Webpack могут комбинир-ся вместе, т.е. при помощи GULP мы можем запускать Webpack!



// Lesson 110. Библиотека Jquery
// Подключим ее через Npm: npm i jquery --save
// Где --save означает что она будет подключена в продакшн-версии и будет вкл-ся уже на самом сайте!
// Теперь библиотека Jquery появилась у нас в node_modules и мы можем испол-ть ее у нас в скрипте, для этого нужно:
// import 'jquery';
// где в '' мы указываем название npm-пакета, справа от import 'jquery'; мы увидим сколько места он занимает, 
// это значит что пакет подключился и работает
// Далее уже запускаем наш npx webpack

// Самая главная фун-я для получения элемента через Jquery - $(), где в '' мы пропис-м собственно сам элемент(по id, классу и тд)
// где $() - это обычная функция и пользоваться ею можно соот. образом
const btn = $('#btn');
console.log(btn);             // Uncaught ReferenceError: $ is not defined
// в резул-те в консоли мы увидим след. ошибку: $ is not defined
// И это норм. ситуация когда мы импортируем какую-то библиотеку, через import 'jquery'; мы импортнули всю библ-ку
// но иногда нам допол. нужно еще и импортировать главную сущности кот-я будет испол-ся в проекте:
// import $ from 'jquery';
// и далее все сущности подвязанные на фун-ю $ тоже будут добавлены в наш скомпил-й главный bundle.js файл
// И ошибки мы уже не увидим!

// Попрактикуемся

// Если наша DOM структура сформир-а, мы будем запускать нашу колбек-функцию со всем функ-м внутри
$(document).ready(function() {
    // Обратимся к 1-й кнопке в нашем списке кнопок
    $('.list-item:first').hover(function() {
        $(this).toggleClass('active');
    });
    // Обращаемся к 3-й кнопке по клику на которую у нас пропадает и появл-ся 1-е фото
    $('.list-item:eq(2)').on('click', function() {
        // Обращаемся к четным элементам(1,3 и тд это в jQuery), появление с анимацией
        $('.image:even').fadeToggle('slow');
    });
    // Пропишем анимацию появления и исчезновения вручную
    $('.list-item:eq(4)').on('click', function() {
        $('.image:odd').animate({
            opacity: "toggle",
            height: "toggle"
        }, 2000);
    });
});

