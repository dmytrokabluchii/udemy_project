'use strict';
// Lesson 82. JSON формат передачи данных, глубокое клонирование объектов

// JSON (JavaScript Object Notation) – это общий формат для представления значений и объектов. 
// JSON - текстовый формат данных, следующий за синтаксисом объекта JavaScript.
// Первоначально он был создан для JavaScript, но многие другие языки также имеют библиотеки, которые могут работать с ним. 
// Таким образом, JSON легко использовать для обмена данными, когда клиент использует JavaScript, а сервер написан 
// на Ruby/PHP/Java или любом другом языке.

// JSON поддерживает следующие типы данных:
// Объекты { ... }
// Массивы [ ... ]
// Примитивы:
// строки,
// числа,
// логические значения true/false,
// null.

// Например объект с данными ниже нам нужно передать на сервер, но напрямую объект мы отправить не можем, т.к. сервер и
// протоколы данных нас просто не поймут и нам нужно превратить его в один из вариантов которые можно транспортировать
// и уже потом с frontend мы перед-м эти данные на backend. Передача по HTTP в самом конце стр-цы!
const person = {
    name: 'Dima',
    tel: '0679166300'
};

// JavaScript предоставляет методы:
// JSON.stringify() для преобразования объектов в JSON, где в () перед-м наш объект
console.log(JSON.stringify(person));     // {"name":"Dima","tel":"0679166300"}
// И такой формат данных(JSON) мы можем передать на сервер, он его поймет

// JSON.parse() для преобразования JSON обратно в объект. 
// Например нам с сервера пришел JSON-объект и нам его нужно превр-ть в обычный объект в JS и уже как-то испол-ть
console.log(JSON.parse(JSON.stringify(person)));   // { name: 'Dima', tel: '0679166300' }
// Т.е. мы получаем обратно самый обычный объект, с одинарными '', и далее мы можем работать с ним как с обычным объектом!

// Существуют Конвертеры JSON в XML (https://tools.icoder.uz/json-to-xml-converter.php)


// Глубокое клонирование объектов. Вспомним Lesson 34 Передача по ссылке или по значению
const person2 = {
    name: 'Dima',
    tel: '0679166300',
    parents: {
        mam: 'Natalya',
        dad: 'Sergey'
    }
};
// Сделаем глубокую копию объекта выше
const clone = JSON.parse(JSON.stringify(person2)); 
// В результате мы получим глубокого клона объекта
clone.parents.mam = 'Nastya';
console.log(person2);   // { name: 'Dima', tel: '0679166300', parents: { mam: 'Natalya', dad: 'Sergey' } }
// Ниже мы получаем абсол-но независимый объект который можем в будущем испол-ть
console.log(clone);     // { name: 'Dima', tel: '0679166300', parents: { mam: 'Nastya', dad: 'Sergey' } }
// И если бы мы делали поверх-ю копию объекта то у нас имя поменялось бы везде!



// HTTP
// чтобы понять как общается клиент с сервером нам нужно прочитать про протокол HTTP, подр-е на https://ru.wikipedia.org/wiki/HTTP
// HTTP (англ. HyperText Transfer Protocol — «протокол передачи гипертекста») — протокол прикладного уровня передачи данных, 
// изначально — в виде гипертекстовых документов в формате HTML, в настоящее время используется для передачи произвольных данных.
// Основой HTTP является технология «клиент-сервер», то есть предполагается существование:
// - Потребителей (клиентов), которые инициируют соединение и посылают запрос;
// - Поставщиков (серверов), которые ожидают соединения для получ-я запроса, произв-т необх-е действия и возвр-т обратно сооб-е 
// с результатом. HTTP в настоящее время повсеместно используется во Всемирной паутине для получения информации с веб-сайтов.
//      Всё программное обеспечение для работы с протоколом HTTP разделяется на три большие категории:
// - Серверы как основные поставщики услуг хранения и обработки информации (обработка запросов);
// - Клиенты — конечные потребители услуг сервера (отправка запроса);
// - Прокси (посредники) для выполнения транспортных служб.
// Для отличия конечных серверов от прокси в офиц. документации используется термин «исходный сервер» (англ. origin server). 
// Один и тот же програм-й продукт может одновр-но выполнять функции клиента, сервера или посредника в завис-ти от постав-х задач.
//      Методы HTTP (англ. HTTP Method). Обычно метод представляет собой короткое английское слово, записанное заглавными буквами.
// Сервер может использовать любые методы, не существует обязательных методов для сервера или клиента. Если сервер не распознал 
// указанный клиентом метод, то он должен вернуть статус 501 (Not Implemented). Если серверу метод известен, но он неприменим 
// к конкретному ресурсу, то возвращается сообщение с кодом 405 (Method Not Allowed). В обоих случаях серверу следует включить 
// в сообщение ответа заголовок Allow со списком поддерживаемых методов.
// Кроме методов GET и HEAD, часто применяется метод POST.
//      HTTP методы GET и POST 
// Используются для отправки данных на сервер. Чаще всего методы используются в HTML формах, гиперссылках и AJAX запросах.
// POST и GET запросы можно отправить на сервер с помощью любого программного обеспечения, работающего с протоколом HTTP.
// Обработка запросов может отличаться в зависимости от типа сервера.
// Большинство действующих сайтов работают с языком программирования PHP. В этом случае передаваемые данные попадают в 
// суперглобальные массивы $_GET и $_POST.
//      Страница, созданная методом GET, может быть открыта повторно множество раз. Такая страница может быть кэширована 
// браузерами, проиндексирована поисковыми системами и добавлена в закладки польз-м. Из этого следует, что метод GET следует 
// использовать для получения данных от сервера и не желательно в запросах, предполагающих внесений изменений в ресурс.
//      Запрос, выполненный методом POST, напротив следует использовать в случаях, когда нужно вносить изменение в ресурс 
// (выполнить авторизацию, отправить форму оформления заказа, форму обратной связи, форму онлайн заявки). Повторный переход 
// по конечной ссылке не вызовет повторную обработку запроса, так как не будет содержать переданных ранее параметров. 
// Метод POST имеет большую степень защиты данных, чем GET: параметры запроса не видны пользователю без использования 
// специального ПО, что дает методу преимущество при пересылке конфиденциальных данных, например в формах авторизации.
// HTTP метод POST поддерживает тип кодирования данных multipart/form-data, что позволяет передавать файлы.
// Также следует заметить, что методы можно комбинировать. То есть, при необходимости вы можете отправить POST запрос на URL, 
// имеющий GET параметры.
