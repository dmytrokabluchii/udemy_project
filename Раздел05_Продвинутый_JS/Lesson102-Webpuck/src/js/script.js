// Webpack. Сборщик модулей. Собираем наш проект

// Импортируем фун-ю с main.js
// испол-м синтаксис фун-и require, которая импоритирует код, где в () укажем путь к файлу, без .js
// Т.к. далее сборщик Webpack сам поймет что за файл ему нужно испол-ть!
const myNewModule = require('./main');

// Далее мы создадим объект с нашей функ-й
const myModuleInstance = new myNewModule();
// и теперь мы сможем испол-ть методы фун-и из main.js
myModuleInstance.hello();
myModuleInstance.goodbye();

// Браузер не может собирать модули самостоятельно, и в текущем виде просто выдаст ошибку что он не знает фун-и require
// Любая модульная система должна быть собрана в один результирующий файл, и для сборки модулей нам и поможет сборщик Webpack!
// Он может не только собирать скрипты в кучу, но и конфигурировать наш проект, обраб-ть стили, картинки, формир-ть папки и тд
// При этом GULP - это планировщик задач, при помощи него мы можем собирать разные "таски"(tasks - задачи), кот-е выпол-ся
// в различных обстоят-х, сам по себе он не может собирать скрипты, обраб-ть изобр-я и тд, он лиш подкл-т к себе определ-е
// модули и запускает определ-е задачи когды мы это требуем.
// Webpack - это как раз сборщик модулей, мы его настраиваем и запускаем что бы он собирал проект и эти технологии, 
// GULP и Webpack могут комбинир-ся вместе, т.е. при помощи GULP мы можем запускать Webpack!
