/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/***/ ((module) => {

// Webpack. Сборщик модулей. Собираем наш проект

// Модули CommonJS
function myModule() {
    this.hello = function() {
        console.log('hello');
    };
    this.goodbye = function() {
        console.log('bye');
    };
}
// Нам ну чтобы фун-я выше перешла из теущего файла(main.js) в index.js где мы ее сможем испол-ть много раз
// Далее испол-м синксис CommonJS. Ниже обратимся к объекту module, у кот-го есть св-во exports
// И в него мы помещаем то что хочем экспортировать
module.exports = myModule;








//  CommonJS — это добровольная рабочая группа, которая проектирует, прототипирует и стандартизирует различные JavaScript API. 
// На сегодняшний день они ратифицировали стандарты для модулей и пакетов — CommonJS определяют простой API для написания 
// модулей, которые могут быть использованы в браузере с помощью тега <script>, как с синхронной, так и с асинхронной загрузкой.
// В структурном плане, CommonJS-модуль представляет собой готовый к переиспользованию фрагмент JavaScript-кода, который 
// экспортирует специальные объекты, доступные для использования в любом зависимом коде. CommonJS все чаще используется как 
// стандартный формат JavaScript-модулей. Существует большое количество уроков по написанию CommonJS-модулей, но обычно они 
// описывают две главных идеи: 
// - объект exports, содержащий то, что модуль хочет сделать доступным для других частей системы, и 
// - функцию require, которая используется одними модулями для импорта объекта exports из других.

// Установка Webpack. Данные с оф. сайта по установке
// Все эти команды не нужно выполнять. Опишу каждую поподробнее:
// mkdir webpack-demo - создает новую папку внутри текущей с названием webpack-demo (нам это не нужно)
// cd webpack-demo - мы в терминале заходим в эту папку (тоже не нужно)
// npm init -y - инициализация проекта (не нужно)
// npm install webpack webpack-cli --save-dev - команда по установке webpack, нам пригодится!
// webpack.config.js - это наш конфигурац-й файл
// Далее выполним: npx webpack


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**************************!*\
  !*** ./src/js/script.js ***!
  \**************************/
// Webpack. Сборщик модулей. Собираем наш проект

// Импортируем фун-ю с main.js
// испол-м синтаксис фун-и require, которая импоритирует код, где в () укажем путь к файлу, без .js
// Т.к. далее сборщик Webpack сам поймет что за файл ему нужно испол-ть!
const myNewModule = __webpack_require__(/*! ./main */ "./src/js/main.js");

// Далее мы создадим объект с нашей функ-й
const myModuleInstance = new myNewModule();
// и теперь мы сможем испол-ть методы фун-и из main.js
myModuleInstance.hello();
myModuleInstance.goodbye();

// Браузер не может собирать модули самостоятельно, и в текущем виде просто выдаст ошибку что он не знает фун-и require
// Любая модульная система должна быть собрана в один результирующий файл, и для сборки модулей нам и поможет сборщик Webpack!
// Он может не только собирать скрипты в кучу, но и конфигурировать наш проект, обраб-ть стили, картинки, формир-ть папки и тд
// При этом GULP - это планировщик задач, при помощи него мы можем собирать разные "таски"(tasks - задачи), кот-е выпол-ся
// в различных обстоят-х, сам по себе он не может собирать скрипты, обраб-ть изобр-я и тд, он лиш подкл-т к себе определ-е
// модули и запускает определ-е задачи когды мы это требуем.
// Webpack - это как раз сборщик модулей, мы его настраиваем и запускаем что бы он собирал проект и эти технологии, 
// GULP и Webpack могут комбинир-ся вместе, т.е. при помощи GULP мы можем запускать Webpack!

})();

/******/ })()
;
//# sourceMappingURL=bundle.js.map