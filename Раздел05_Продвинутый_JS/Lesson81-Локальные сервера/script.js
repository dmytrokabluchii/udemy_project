'use strict';
// Lesson 81. Локальные сервера

// Локальные серверы позволяют запускать свой сайт без использования хостинга, прямо на домашнем компьютере. 
// Это может пригодиться для детального тестирования, а также в процессе разработки. Ничего не помешает накатить 
// туда CMS и взаимодействовать с базами данных. Вся сложность заключается в выборе самой программы, 
// которая и выполняет роль локального сервера.
// Топ лучших локальных серверов:
// - OpenServer, Denwer, WampServer и тд https://timeweb.com/ru/community/articles/luchshie-lokalnye-servery

// ХОСТИНГ
// Существует несколько разновидностей хостинга:
// файловый — предоставление места для хранения информации в виде файлов
// игровой — предоставление серверов для размещении многопользовательских сетевых игр
// почтовый — услуга по предоставлению приватной почтовой системы с поддержкой протоколов SMTP, IMAP, POP3
// wiki — предоставление серверов для создания и управления вики-страницами
// DNS — предоставление системы хранение записей доменных имен
// видео — для загрузки видео-файлов и другие.
// Хостинг сайтов — это услуга по размещению сайта в интернете.
// Заказывая услугу хостинга сайта, вы арендуете место на выделенном сервере. 

// Сервер 
// Сервер — это компьютер, работающий круглосуточно на котором размещаются файлы и базы данных вашего сайта, а также 
// запущено специальное программное обеспечение, необходимое для работы сайта: веб-сервер (Apache, Nginx), 
// интерпретатор PHP, сервер баз данных (MySQL) и другое ПО.
// При аренде места на сервере, нужно выбрать тариф хостинга, тарифы отличаются:
// количеством баз данных;
// объемом физического пространства для хранения ваших файлов;
// количеством размещаемых сайтов, баз данных и ftp-пользователей; и тд

// browsersync
// Этот инструмент позволяет отслеживать изменения в исходных файлах и скриптах без перезагрузки веб-страницы

// HTTP методы GET и POST 
// Используются для отправки данных на сервер. Чаще всего методы используются в HTML формах, гиперссылках и AJAX запросах.
// POST и GET запросы можно отправить на сервер с помощью любого программного обеспечения, работающего с протоколом HTTP.
// Обработка запросов может отличаться в зависимости от типа сервера.
// Большинство действующих сайтов работают с языком программирования PHP. В этом случае передаваемые данные попадают в 
// суперглобальные массивы $_GET и $_POST.
//      Страница, созданная методом GET, может быть открыта повторно множество раз. Такая страница может быть кэширована 
// браузерами, проиндексирована поисковыми системами и добавлена в закладки польз-м. Из этого следует, что метод GET следует 
// использовать для получения данных от сервера и не желательно в запросах, предполагающих внесений изменений в ресурс.
//      Запрос, выполненный методом POST, напротив следует использовать в случаях, когда нужно вносить изменение в ресурс 
// (выполнить авторизацию, отправить форму оформления заказа, форму обратной связи, форму онлайн заявки). Повторный переход 
// по конечной ссылке не вызовет повторную обработку запроса, так как не будет содержать переданных ранее параметров. 
// Метод POST имеет большую степень защиты данных, чем GET: параметры запроса не видны пользователю без использования 
// специального ПО, что дает методу преимущество при пересылке конфиденциальных данных, например в формах авторизации.
// HTTP метод POST поддерживает тип кодирования данных multipart/form-data, что позволяет передавать файлы.
// Также следует заметить, что методы можно комбинировать. То есть, при необходимости вы можете отправить POST запрос на URL, 
// имеющий GET параметры.

// Ajax
// Это привело к созданию технологий, позволяющих веб-страницам запрашивать небольшие фрагменты данных (например, HTML, XML, JSON 
// или обычный текст) и отображать их только при необходимости, помогая решать проблему, описанную выше.
// Это достигается с помощью таких API, как XMLHttpRequest или - более новой - Fetch API. Эти технологии позволяют 
// веб-страницам напрямую обрабатывать запросы HTTP для определённых ресурсов, доступных на сервере, и форматировать 
// результирующие данные по мере необходимости перед их отображением.

