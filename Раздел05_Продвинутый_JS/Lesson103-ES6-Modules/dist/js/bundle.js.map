{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACa;AACb;AACA;AACA;AACA;AACe,mBAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,YAAY;AACZ,sCAAsC;AACtC,8CAA8C;AAC9C;AACA,qCAAqC,IAAI;AACzC,0CAA0C,IAAI;AAC9C,gBAAgB;AAChB;AACA,YAAY,yBAAyB;AACrC,YAAY,+CAA+C;AAC3D;;;;;;UCtCA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNA;AACA;AACA;AACA,YAAY;AACoB;AAChC;AACoC;AACpC;AAC+B;AAC/B;AAC4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sCAAQ,EAAE,MAAM,sCAAQ,CAAC,OAAO;AAC/C,wCAAU,qCAAqC;AAC/C,iDAAM;AACN,kBAAkB,KAAK,MAAM,IAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///./src/js/main.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/js/script.js"],"sourcesContent":["// ES6 Modules + Webpack\r\n\r\n// Из текущего файла мы код экспортируем, испол-м для этого ключевое слово export, и далее указыв-м то что экспор-м(напр. перем-ю)\r\nexport let one = 1;\r\n// Таким же образом можно экспортир-ть и фун-и, фун-я при этом должна иметь имя! \r\nexport function sayHi() {\r\n    console.log('Hello');\r\n}\r\n// Немного другой способ экспорта\r\nlet two = 2;\r\n// Данный способ синтаксиса назыв-я именованным, где перем-я заключ-ся в {}\r\nexport {two};\r\n\r\n// Также существует метод экспорта \"по умолчанию\": export default, у этого способа есть свои преим-ва,\r\n// например далее(в script.js) мы сможем испол-ть эту фун-ю как отдельную\r\n// Такой вид экспорта может быть только один!!!\r\nexport default function sayHi2() {console.log('Hello2');}\r\n// Можно испол-ть много раз export при этом!\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export\r\n// Инструкция export используется для экспорта функций, объектов или примитивов из файла (или модуля).\r\n//      Синтаксис:\r\n// export { name1, name2, …, nameN };\r\n// export { variable1 as name1, variable2 as name2, …, nameN };\r\n// export let name1, name2, …, nameN; // или var\r\n// export let name1 = …, name2 = …, …, nameN; // или var, const\r\n    // export default выражение;\r\n    // export default function (…) { … } // или class, function*\r\n    // export default function name1(…) { … } // или class, function*\r\n    // export { name1 as default, … };\r\n// export * from …;\r\n// export { name1, name2, …, nameN } from …;\r\n// export { import1 as name1, import2 as name2, …, nameN } from …;\r\n// где nameN - Идентификатор для экспорта (чтобы он мог быть импортирован с помощью import в другом файле (скрипте)).","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// ES6 Modules + Webpack\r\n\r\n// В текущий файл мы код импортируем(из main.js), испол. ключ. слово import, \r\n// где в {} через , пишем имена перем-х или фун-й, далее указ-м ключ. слово from 'путь - откуда импор-м'\r\nimport {one, two} from './main';\r\n// Также мы можем сразу же и переименовывать имена импортир-х перем-х! Испол-ся ключ-е слово as(как)!\r\nimport {one as first} from './main';\r\n// Если мы захочем импортировать весь код с файла, испол * и как(as) назовем файл(напр. data)\r\nimport * as data from './main';\r\n// Импортир-м дефолтный метод экспорта:\r\nimport sayHi2 from './main';\r\n// При подключении скрипта в html через type=\"module\" в пути файла добав-м \r\n// import sayHi2 from './main.js';\r\n\r\n// далее уже можно испол-ть методы и сущности с этих экспорт-х перем-х\r\n// Т.к. браузер не может сам работать с модулями не забываем запускать сборщик модулей(Webpack например)\r\n// где data у нас будет по факту объектом вкл-м все что было экспортировано с файла main.js,\r\n// и мы из него, как из объекта, можем вытаскивать те перем-е и методы что нам нужны!\r\nconsole.log(`${data.one} and ${data.two}`);    // 1 and 2\r\ndata.sayHi();                                  // Hello\r\nsayHi2();\r\n// console.log(`${one} and ${two}`);\r\n// console.log(first);\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import\r\n// Инструкция import используется для импорта ссылок на значения, экспортированные из внешнего модуля. Импортированные модули \r\n// находятся в строгом режиме независимо от того, объявляете ли вы их как таковые или нет. Для работы инструкции во встроенных \r\n// скриптах нужно прописать у тэга script type=\"module\" или испол-ть сборщик модулей(Webpuck например).\r\n"],"names":[],"sourceRoot":""}