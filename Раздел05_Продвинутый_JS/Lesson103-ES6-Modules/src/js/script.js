// ES6 Modules + Webpack

// В текущий файл мы код импортируем(из main.js), испол. ключ. слово import, 
// где в {} через , пишем имена перем-х или фун-й, далее указ-м ключ. слово from 'путь - откуда импор-м'
import {one, two} from './main';
// Также мы можем сразу же и переименовывать имена импортир-х перем-х! Испол-ся ключ-е слово as(как)!
import {one as first} from './main';
// Если мы захочем импортировать весь код с файла, испол * и как(as) назовем файл(напр. data)
import * as data from './main';
// Импортир-м дефолтный метод экспорта:
import sayHi2 from './main';
// При подключении скрипта в html через type="module" в пути файла добав-м 
// import sayHi2 from './main.js';

// далее уже можно испол-ть методы и сущности с этих экспорт-х перем-х
// Т.к. браузер не может сам работать с модулями не забываем запускать сборщик модулей(Webpack например)
// где data у нас будет по факту объектом вкл-м все что было экспортировано с файла main.js,
// и мы из него, как из объекта, можем вытаскивать те перем-е и методы что нам нужны!
console.log(`${data.one} and ${data.two}`);    // 1 and 2
data.sayHi();                                  // Hello
sayHi2();
// console.log(`${one} and ${two}`);
// console.log(first);






// import
// Инструкция import используется для импорта ссылок на значения, экспортированные из внешнего модуля. Импортированные модули 
// находятся в строгом режиме независимо от того, объявляете ли вы их как таковые или нет. Для работы инструкции во встроенных 
// скриптах нужно прописать у тэга script type="module" или испол-ть сборщик модулей(Webpuck например).
