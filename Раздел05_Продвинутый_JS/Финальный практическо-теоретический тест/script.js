'use strict';
// Практический тест 1: Финальный практическо-теоретический тест

// Вопрос 1: Правильно     
// Что выведет в консоль данный код?
const promise = new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve('foo');
    }, 1000);
    setTimeout(() => {
        reject('bar');
    }, 900);
});
promise.then((value) => {
    console.log(value);
}).catch((e) => console.log(e));      // bar
// Ответ: bar
// Объяснение:
// Обратите внимание на то, что reject запускается быстрее, чем resolve. Это значит, что код из блока catch выполняется 
// и на этом работа промиса окончена. А в консоль выводится как раз то сообщение, которое было передано в эту функцию.
// P.S. foo/bar - это классические названия в программировании для описания каких-либо тестовых сущностей, 
// когда мы не знаем их точного имени.

// Вопрос 2: Правильно
// Event loop - это...
// Ответ: Механизм контроля очереди вызовов ...
// Объяснение: Событийный цикл и его определение - это не особо сложная задача. Главное держать перед глазами ту схему 
// его работы, которую мы с вами разбирали.

// Вопрос 3: Правильно
// Какой из команд можно создать элемент на странице?
// Ответ: document.createElement('div');

// Вопрос 4: Правильно
// Что такое объект события?
// Ответ: Это объект кот-й содер. всю инфо об произ-м событии

// Вопрос 5: 
// Сколько аргументов может быть у функции?
// Ответ: Сколько угодно
// Объяснение: Реальный базовый вопрос с собеседований. Аргументов может быть бесконечно много. (в пределах памяти, конечно же)

// Вопрос 6: Правильно
// Какой формат экспорта/импорта ES6 модулей в JS записан синтаксически правильно?     
// export function sum(a, b) {
//     console.log(a + b);
// }
// import {sum} from './путь';

// Вопрос 7: Правильно
// Что будет содержаться в переменной result после завершения кода?
function foo(a,b) {
    const [first, second] = a;
    const {eng, ru} = b;
    return `${second}, ${ru}`;
}
const result = foo(['Hello', 'Привет'], {ru: 'Мир', eng: 'World'});
// Ответ: 'Привет Мир';
// Объяснение: Не забывайте про прием деструктуризации

// Вопрос 8: Правильно
// a = [1, 2, 3]; b = [1, 2, 3];   Правда ли что a == b ?
// Ответ: нет, это 2 разных массива с один. знач-ми
// Объяснение: Всегда помните про то, что каждый объект в js уникален. Даже если у них будет одинаковое содержимое, 
// то это все равно разные объекты. А еще стоит помнить тему передачи данных по ссылке или по значению.

// Вопрос 9: Правильно
// Что будет результатом выполнения этого кода на странице?
// const msg = 'Заявка №231';
// const div = document.createElement('div');
// div.style.background = 'red';
// div.setAttribute('data-msg', true);
// div.textContent(msg);
// document.body.append(div);
// Ответ: ошибка будет
// Объяснение: Обратите внимание на то, что textContent - это свойство блока, его текстовый контент. Это не функция. 
// Поэтому и использовать его нужно вот так:
// div.textContent = msg;
// Отсюда и возникнет ошибка.

// Вопрос 10: Правильно
// Что будет выведено в консоль в результате работы функции?
// 'use strict';
// function getSum(a, b) {
//     function sum() {
//         console.log(this.a);
//         return a + b;
//     }
//     console.log(sum());
// }
// getSum(4, 5);
// Ответ: ошибка будет
// Объяснение: В данном случае sum - это обычная функция, контекст вызова которой будет undefined (за счет 
// установленного 'use strict';). Отсюда, this.a превращается в undefined.a, что приводит к ошибке.

// Вопрос 11: Правильно
// Какой результат даст этот код?
// 0 || 1
// 0 && 1
// 0 || NaN || false || null
// Ответ: 1 0 null

// Вопрос 12: Правильно
// У вас есть функция, которая скрывает номер телефона и имя пользователя до определенного действия. Эта функция выглядит вот так:
// const msg = 'My number +12345678, name: Oleg';
// function transformMsg(str) {
//     // Пропущенная часть
//     return b;
// }
// transformMsg(msg)
// Результатом вызова этой функции сейчас будет:
// My number *****, hidden
// Какой код подходит на место пропущенной части функции?
// Ответ: ...
// Объяснение: Сила регулярных выражений в том, что им все равно, какое имя или номер телефона будет использоваться. 
// Они найдут и поменяют их на нужные значения.

// Вопрос 13: Правильно
// Какое значение будет выведено в консоль при выполнении этого кода?
// let c = 4;
// function addX(x) {
//   return function(n) {
//      return n + x
//   }
// }
// const addThree = addX(3); 
// let d = addThree(c);
// let res = addThree(c);
// console.log(res)
// Ответ: 7
// Объяснение: Это небольшая задачка на замыкание функций. Обратите внимание на то, что х при вызове функции addX(3), 
// сохраняется в замыкании возвращаемой функции. И теперь, каждый раз при вызове новой функции мы будем добавлять к 
// тройке указанный аргумент.

// Вопрос 14: Правильно
// Что будет выведено в консоль?
if (0) {
    console.log('first')
} else if (NaN) {
    console.log('second');
} else if (' ') {
    console.log('third');
} else if (null) {
    console.log('fourth');
}
// Ответ: 'third'
// Объяснение: Не забывайте про те сущности, которые в логическом контексте будут false. А вот строка с пробелом - 
// это уже true, так как содержит 1 символ.

// Вопрос 15: Правильно
// Что будет содержаться в переменной result в результате работы кода?
const arr = [
    {
        name: 'Alex',
        salary: 500
    },
    {
        name: 'Ann',
        salary: 1500
    },
    {
        name: 'John',
        salary: 2500
    },
];
// const result = arr.map(item => Object.entries(item)[1][1]).reduce((sum, curr) => sum + curr);
// console.log(result)     // 4500
// Ответ: 4500

// Вопрос 16: Правильно
// Микрозадачи в событийном цикле - это...
// Ответ: действия созд-е промисами и await, вкл-я then/catch/finally
// Объяснение
// Это важное понятие, которое часто спрашивают на собеседованиях. Не забывайте про разницу между макро- и микрозадачами

// Вопрос 17: Правильно
// Что выведет этот код:
// let y = 1; 
// let x = y = 2; 
// console.log(x);    // 2
// Ответ: 2

// Вопрос 18: Правильно
// Как правильно задать наследование одного класса от другого?
// Ответ: class Slider extends Element {}

// Вопрос 19: 
// Какая основная проблема этого кода?
// async function makeRequest() {
//     return await fetch('https://jsonplaceholder.typicode.com/todos/1')
//         .then(json => console.log(json))
// }
// makeRequest()
// Ответ: нет преоб-я из json формата в об. объект
// Объяснение: Не забывайте, что запрос при помощи fetch дает нам промис, который еще нужно обработать. В данном случае 
// правильный код будет выглядеть:
// async function makeRequest() {
//     return await fetch('https://jsonplaceholder.typicode.com/todos/1')
//     .then(response => response.json())
//     .then(json => console.log(json));
// }
// makeRequest();

// Вопрос 20: Правильно
// Какой результат работы функции combineUrls в данном случае?
// combineUrls('https', 'mysite.com');
// const combineUrls = (protocol, domain) => {
//     return `${protocol}://${domain}`;
// }
// Ответ: error
// Объяснение: Обратите внимание на то, что такой способ написания функции - это function expression. А это значит, 
// что она создается только в тот момент, как до неё дойдет код. Поэтому ответом будет ошибка ссылочного типа 
// (ReferenceError). Невозможно использовать то, чего еще не существует в коде.

// Вопрос 21: Правильно
// Какой командой можно удалить элемент со страницы?
// Ответ: div.remove()

// Вопрос 22: Правильно
// Какие из методов массивов возвращают новый массив в результате своей работы?
// P.S. Это важно знать перед частью с react'ом, да и в работе тоже. Попробуйте вспомнить, мы все их обсуждали и использовали.
// Ответ: filter, map, slice

// Вопрос 23: Правильно
// Какой из вариантов получения этого элемента со страницы будет правильным?
// <div id="hi">Hello</div>
// Ответ: document.querySelector('#hi');
// Объяснение: Не забывайте, что правильное получение элементов - это важный навык. Селектор, где мы указываем # применяется 
// только в командах querySelector и querySelectorAll , а для получения одного элемента подходит только первая из этих команд.

// Вопрос 24: Правильно
// Какой из методов безопаснее всего использовать, если мы четко хотим получить от пользователя текст и использовать его дальше?
// Ответ: textContent

// Вопрос 25: Неправильно
// Как называется прием из кода ниже?
// const user = {
//     name: 'Alex',
//     age: 25
// }
// const {name, age} = user;
// Ответ: деструктаризация

// Вопрос 26: Правильно
// Код ниже работает без ошибки. Но опытный разработчик считает его плохим. В чем причина?
// const price = 500;
// const money = 400;
// switch (true) {
//     case price > money:
//         console.log('Мне не хватает денег');
//     case price < money:
//         console.log('Мне хватает денег!');
// }
// Ответ: все перечисл-е

// Вопрос 27: Правильно
// Как отменить стандартное поведение браузера при работе со ссылками, формами и тп?
// Ответ: event.preventDefault();

// Вопрос 28: Правильно
// Какого метода не существует у свойства classList?
// Ответ: .includes

// Вопрос 29: Неправильно
// Какой итоговый результат мы получим в консоли, если запустить этот код?
// (Постарайтесь решить без запуска, проанализировав код. Именно так дают его на собеседовании)
const promisify = (item, delay) =>
    new Promise(resolve => setTimeout(() => resolve(item), delay));
const a = () => promisify('a', 100);
const b = () => promisify('b', 5000);
const c = () => promisify('c', 3000);
async function one() {
    const promises = [a(), b(), c()];
    const [outpu1, outpu2, outpu3] = await Promise.all(promises);
    return `one is done: ${outpu1} ${outpu2} ${outpu3}`;
} 
async function two() {
    const promises = [a(), b(), c()];
    const outpu1 = await Promise.race(promises);
    return `two is done: ${outpu1}`;
}
async function three() {
    const outpu1 = await a();
    const outpu2 = await b();
    const outpu3 = await c();
    return `three is done: ${outpu1} ${outpu2} ${outpu3}`
}
one().then(console.log);
two().then(console.log);
three().then(console.log);
// Ответ: 
// Объяснение: Это классическая задача на промисы. Внимательно смотрите на команды race() и all(), а так же на 
// наличие async/await. Именно на понимание их работы и направлена данная задача.

// Вопрос 30: Правильно
// Что будет выведено в консоль в результате работы функции?
function setOptions(height, width, ...additional) {
    console.log(height, width, ...additional);
}
setOptions(400, 500, 'red', 'top');
// Ответ: 400, 500, 'red', 'top'