'use strict';
// Lesson 114. Event loop, подробная работа асинхронных и синхронных операций

// console.log(1);
// setTimeout(() => {
//     console.log('timeout');
// }, 4000);
// setTimeout(() => {
//     console.log('timeout_4000');
// }, 4000);
// console.log(2);
// Если мы так и запустим код то у нас сначала выпол-ся console.log-и, а потом уже setTimeout-ы
// Т.е. сначала у нас выпол-ся синхронные операции(такие как console.log и тд), а затем асинх-е - это такие каторые
// запускаются с течением времени, такие как: setTimeout(), setInterval(), запросы на сервер(т.к. мы не знаем когда 
// именно выполнится этот запрос) и тд, поэтому такие операции запуск-ся асинхронно и поэтому не мешают выполниению кода
// в наших приложениях. По факту все callback что мы прописываем явл-ся асних-ми, это события(клика, скрола, submit и тд).

// Функ-я для имитации загруженности на браузер 
let k = 0;
function count() {
    // 1e9 - это означает 1 с 9-ю нулями
    for (let i = 0; i < 1e9; i++) {
        k++;
    }
    alert('Done!');
}
// count();
// Для решения ресурсоемких задачь есть спец. паттерны, когда мы можем разбить задачу на кусочки

setTimeout(() => {
    console.log(1);
}, 0);
console.log(2);
// Сначала выпол-ся console.log(2); а потом уже console.log(1);, т.к. в случае с .log(2) это синх-я операция, а с .log(1) асинх-я
// И сам язык JS по умолчанию вместо наших 0мс подставит 4мс, это особенность чтобы была мин. задержка для работы браузера





// Цикл событий (event loop) 
// Это ключ к асинхронному программированию на JavaScript. Сам по себе язык однопоточный, но использование этого механизма 
// позволяет создать дополнительные потоки, чтобы код работал быстрее.
// По простому event loop - это бесконечный цикл, который ожидает задачи, выполняет их и затем снова ожидает выпол-я задач.

// В JavaScript асинхронность — основной инструмент, который обрабатывает запросы параллельно с загрузкой веб-страницы. 
// Сейчас невозможно представить интернет, где все запросы на сервер отправлялись бы с перезагрузкой страницы.
// Любые данные от сервера запрашиваются асинхронно: отправляется запрос (XMLHttpRequest или XHR), и код не ждёт его возвращения, 
// продолжая выполняться. Когда же сервер отвечает, объект XHR получает уведомление об этом и запускает функцию обратного 
// вызова — callback, который передали в него перед отправкой запроса.
// Если правильно использовать инструменты языка, то выполнение запроса, который происходит последовательно и в одном потоке, 
// никак не мешает приёму событий и реакции на них — человек спокойно работает с интерфейсом, не замечая лагов, сбоев и зависаний.
// Event loop в JavaScript — менеджер асинхронных вызовов.
// Чтобы этот хитрый процесс слаженно работал, в JavaScript реализован механизм для управления очерёдностью исполнения кода. 
// Поскольку JS - это однопоточный язык, возникла необходимость "вклиниваться" в текущий контекст исполнения. 
// Этот механизм называется event loop — событийный цикл. Подробнее на: https://www.jscamp.app/ru/docs/javascript25/
