'use strict';

// Lesson 58. Итерируемые конструкции
// Перебираемые (или итерируемые) объекты – это концепция, которая позволяет использовать любой объект в цикле for..of.

// Если мы испол-м цикл for...in то он перебир-т весь объект вместе с методами(user:)
// цикл for...in переб-т не по порядку, поэтому не рекоменд-ся его применять на массивах и строках
let range = {
  from: 1,
  to: 5,
  user: () => {
    console.log(`${this.from} ${this.to}`);
  }
};
for (let num in range) {
  console.log(range[num]); 
}

// for...of перебирает значения перебираемого объекта
const arr = [1, 5, 9, 67];
for (let num of arr) {
  // т.к. в num у нас уже будет значение перебир-го объекта
  // console.log(num);  // 1 5 9 67
}

// имеем объект с зарплатами
const salary = {
  ivan: 1000,
  ann: 1500,
  dima: 5000,
  sayHello: () => {
    console.log('hello!');
  }
};
// Чтобы сделать объект salary итерируемым (и позволить for..of работать с ним), нам нужно добавить в объект метод 
// с именем Symbol.iterator (специальный встроенный Symbol, созданный как раз для этого).
// Когда цикл for..of запускается, он вызывает этот метод один раз (или выдаёт ошибку, если метод не найден). 
// Этот метод должен вернуть итератор – объект с методом next().
// Дальше for..of работает только с этим возвращённым объектом.
// Когда for..of хочет получить следующее значение, он вызывает метод next() этого объекта.
// Результат вызова next() должен иметь вид {done: Boolean, value: any}, где done=true означает, что цикл завершён, 
// в противном случае value содержит очередное значение. Подроб-е на https://learn.javascript.ru/iterable

salary[Symbol.iterator] = function() {
  return {
    current: this.ivan,
    last: this.dima,
    // результат работы этого метода всегда объект, говорящий что наш цикл еще работает или уже завершен
    next() {
      if (this.current < this.last) {
        this.current = this.current + 500;
        // объект должен возвр-ся обязательно в таком виде!
        return {done: false, value: this.current};
      } else {
        return {done: true};
      }
    }
  };
};
for (let res of salary) {
  console.log(res);   // 1500 2000 2500 ... 5000
}
// И зная данный способ перебора мы можем сделать любой объект перебираемым по нашему требованию!

// Также мы можем создать iterator своими руками
const iterator = salary[Symbol.iterator]();
console.log(iterator.next());     // {done: false, value: 1500}

