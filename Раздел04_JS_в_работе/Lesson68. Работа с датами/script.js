
// Lesson 66 Сборщик мусора и утечки памяти
// Управление памятью в JavaScript выполняется автоматически и незаметно. Мы создаём примитивы, объекты, функции… 
// Всё это занимает память.
// Но что происходит, когда что-то больше не нужно? Как движок JavaScript обнаруживает, что пора очищать память?

// JS это интерпретирумый язык програм-я. Интерпретаторы и компиляторы отвечают за преобразование языка 
// программирования или сценариев (язык высокого уровня) в машинный код. 
// Интерпретатор  —  это компьютерная программа, которая преобразует каждый программный оператор высокого уровня 
// в машинный код. Сюда входят исходный код, предварительно скомпилированный код и сценарии.
// Интерпретатор представляет собой машинную программу, которая непосредственно выполняет набор инструкций без их компиляции. 
// Примерами интерпретируемых языков являются Perl, Python и Matlab.

// Компилятор  —  это компьютерная программа, которая переводит компьютерный код с одного языка программирования 
// на другой. Компилятор берет программу целиком и преобразует ее в исполняемый компьютерный код.
// Компилятор в основном используется для программ, которые переводят исходный код с языка программирования 
// высокого уровня на язык программирования более низкого уровня.
// Компилятор способен выполнять многие или даже все операции: предварительную обработку данных, парсинг, 
// семантический анализ, преобразование входных программ в промежуточное представление, оптимизацию и генерацию кода.

// И компилятор, и интерпретатор выполняют одну и ту же работу  —  преобразовывают язык программирования высокого уровня 
// в машинный код. Однако компилятор преобразовывает исходный материал в машинный код перед запуском программы. 
// Интерпретатор выполняет эту функцию при ее запуске.
// Более подробно в теме к уроку и статьях к нему! Т.к. в реальности нам возм-но и не прийдется столкнуться с данной темой!


// Структуры ниже служат для оптимизации кода и испол-ся редко!!!
// Объект WeakMap — коллекция пар ключ-значение. В качестве ключей могут быть использованы только объекты, 
// а значения могут быть произвольных типов.
// Синтаксис: new WeakMap([iterable])
// iterable - Может быть массивом или любым другим итерируемым объектом, элементы которого являются парами 
// ключ-значение (массивы из двух элементов). Каждая пара ключ-значение будет добавлена во вновь созданный экземпляр WeakMap. 
// Null обрабатывается как undefined.

// WeakSet - Объект WeakSet - коллекция, элементами которой могут быть только объекты. Ссылки на эти объекты 
// в WeakSet являются слабыми. Каждый объект может быть добавлен в WeakSet только один раз.
// Синтаксис: new WeakSet([iterable]);
// iterable - При передаче итерируемого объекта, все его элементы будут добавлены в новый WeakSet. 
// Null обрабатывается как undefined.
