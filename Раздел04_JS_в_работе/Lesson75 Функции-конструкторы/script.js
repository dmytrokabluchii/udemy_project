'use strict';
// Lesson 75 Функции-конструкторы

// Обычный синтаксис {...} позволяет создать только один объект. Но зачастую нам нужно создать множество 
// однотипных объектов, таких как пользователи, элементы меню и т.д.
// Это можно сделать при помощи функции-конструктора и оператора "new".
// Конструкторы нам нужны для создания новых однотипных объектов!

// Функции-конструкторы являются обычными функциями. Но есть два соглашения:
// Имя функции-конструктора должно начинаться с большой буквы.
// Функция-конструктор должна вызываться при помощи оператора "new". Например:
function User1(name) {
  this.name = name;
  this.isAdmin = false;
}
let user = new User1("Вася");
console.log(user.name); // Вася
console.log(user.isAdmin); // false
// Когда функция вызывается как new User(...), происходит следующее:
// 1. Создаётся новый пустой объект, и он присваивается this.
// 2. Выполняется код функции. Обычно он модифицирует this, добавляет туда новые свойства.
// 3. Возвращается значение this.
// Другими словами, вызов new User(...) делает примерно вот что:
function User1(name) {
  // this = {};  (неявно)
  // добавляет свойства к this
  this.name = name;
  this.isAdmin = false;
  // return this;  (неявно)
}
// То есть, результат вызова let user = new User("Вася") – это тот же объект, что и:
// let user = {name: "Вася", isAdmin: false};
// Теперь, когда нам необходимо будет создать других пользователей, мы можем использовать new User("Маша"), 
// new User("Даша") и т.д. Данная конструкция гораздо удобнее и читабельнее, чем каждый раз создавать литерал объекта. 
// Это и является основной целью конструкторов – удобное повторное создание однотипных объектов.


// С Юдеми инфа
const num = new Number(3);
console.log(num);   // [Number: 3]
// тоже самое мы можем сделать и с фун-й 
const num2 = new Function(3);
// и если такая фун-я будет содер-ть в себе методы и св-ва, то она в итоге создаст нам новый объект!
// т.е. созд-м новой фукн-и мы созд-м новый объект, св-ва которого уже прописаны в данной фун-и!

// создадим уже более привычную фун-ю, а не устар-е варианты выше, с 2-мя аргументами для задания имени польз-лю и его id
function User(name, id) {
    // здесь запишем св-во которое будет отобр-ся как в объекте
    // для каждого отдел-го польз-ля указывать свое имя и id, т.е. когда мы регист-ся для каждого юзера id будет уникальным!
    // 2-й name берем прямо из наших аргум-в
    this.name = name;
    this.id = id;
    // след-й объект будет общим для всех
    this.human = true;
    // в эту фун-ю также можно запис-ть и методы
    this.hello = function() {
        // здесь мы можем испол-ть св-ва которые уже есть у нас в объекте!
        console.log(`Hello ${this.name}`);     // Hello Ivan Hello Alex
        // т.е. создав один раз метод прямо у нас в прототипе он будет у каждого из наших потомков
    };
}

// при помощи св-ва prototype мы можем добавлять новые методы или св-ва прямо в наш конструктор,
// и они будут прототипно наслед-ся у потомков! Его часто испол-т когда нет доступа к нашему прототипу
// или мы его не можем менять по каким-то причинам
// сначала мы обращ-ся к User, а затем к его прототипу .prototype и далее сделаем наш метод .exit
User.prototype.exit = function() {
    console.log(`Пользователь ${this.name} ушел`);
};
// далее прототипно у нас будет наслед-ся и этот метод и он появ-ся у всех потомков созд-х после него!
// т.е. мы один раз прописываем большой протип, а потом его уже настраививаем!
// В EC6 появились классы и их удобнее испол-ть в этой роли!

// фун-я выше с подобным систаксисос и называется функцией-конструктором и с ее помощью мы млжем созд-ть новых польз-й
const ivan = new User('Ivan', 28);
// внутри перем-й ivan будет нах-ся уже не фун-я, а объект, т.к. фун-я User уже стала констр-м и когда она вызыв-ся 
// при помощи ключ-го слова new, она созд-т новый объект с теми свой-ми что мы прописали в function User
// и т.к. это конструктор мы можем создавать еще объекты
const alex = new User('Alex', 20);
// запустим метод из фун-и
ivan.exit();
ivan.hello();
alex.hello();

console.log(ivan);  // User { name: 'Ivan', id: 28, human: true }
console.log(alex);  // User { name: 'Alex', id: 20, human: true }
// такие фун-и пред-ны для конструирования объектов и создания новых копий
