
// Lesson 65. Скрипты и время их выполнения. setTimeout и setInterval

// Мы можем вызвать функцию не в данный момент, а позже, через заданный интервал времени. Это называется «планирование вызова».
// Для этого существуют два метода:
// setTimeout позволяет вызвать функцию один раз через определённый интервал времени.
// setInterval позволяет вызывать функцию регулярно, повторяя вызов через определённый интервал времени.
// Поддерживаются во всех браузерах и Node.js.

// setTimeout Синтаксис:
// let timerId = setTimeout(func|code, [delay], [arg1], [arg2], ...)
// func|code - Функция или строка кода для выполнения. Обычно это функция. 
// По историческим причинам можно передать и строку кода, но это не рекомендуется.
// delay - Задержка перед запуском в миллисекундах (1000 мс = 1 с). Значение по умолчанию – 0.
// arg1, arg2… - Аргументы, передаваемые в функцию (не поддерживается в IE9-)

// Пример 1, данный код вызывает sayHi() спустя четыри секунды:
// function sayHi() {
//     console.log('Привет');
// }
// setTimeout(sayHi, 4000);

// Пример 2 с Юдеми
const btn = document.querySelector('.btn');
let timerId,
    iNum = 0;

// timerId = setTimeout( () => {
//     console.log('Hi Dima!');
// }, 2000);

// Пример 3 с Юдеми, иногда можно увидеть и такой синтаксис,где уже аргум-м идет строка 'Hi...' и таких аргум-в может быть много!
// const timerId2 = setTimeout( (text) => {
//     console.log(text);
// }, 3000, 'Hi Dimon!');

// Пример 4 с Юдеми, т.е. в метод setTimeout мы перед-м аргум-м фун-ю logger(т.е. ссылку на неё)
// и после истечения 6 сек вызов-ся фун-я logger
const timerId3 = setTimeout(logger, 5000);
function logger () {
    console.log('Hi everyone!');
}

// Если нам нужно сбросить setTimeout, то отмена через метод clearTimeout
clearTimeout(timerId3);

// Если мы хотим чтобы наш скрипт повт-ся через опред-й период времени, а не просто 1 раз выпол-ся(как в методе setTimeout),
// для этого есть метод setInterval: позволяет вызывать функцию регулярно, повторяя вызов через определённый интервал времени.
// ее синтаксис такой же как и у метода setTimeout
// btn.addEventListener('click', () => {
//     timerId = setInterval(logger2, 500);
// });
// и чтобы фун-я отработала например всего 4 раза и остановила таймер setInterval есть метод clearInterval
// function logger2 () {
//     if (iNum === 3) {
//         clearInterval(timerId);
//     }
//     console.log('Hi World!');
//     iNum++;
// }

// но есть фун-я logger2 будет большой и время ее выпол-я будет прев-ть пол сек, то наш алгоритм нарушится!
// и для решения этой проблемы испол-т рекурсивный вызов setTimeout
// в данном примере наш код всегда будет ждать строго отведенное ему время
// let id = setTimeout(function log() {
//     id = setTimeout(log, 500);
//     if (iNum === 3) {
//         clearInterval(id);
//     }    
//     console.log('Hi everyone in the World!');
//     iNum++;
// }, 1000);  
// сначала код ждет 1 сек. и только потом запускает фун-ю выше
// потом опять подож-т пол. сек и выпол-ть фун-ю log (log, 500)


// создадим простеюшую анимацию на js
function myAnimation() {
    const elem = document.querySelector('.box');
    // перем-я с позицией с которой все будет стартовать
    let pos = 0;
    // т.к. наша фун-я будет запус-ся через опред-й промеж-к времени для плавной анимации
    // т.е. ниже мы будем запус-ть фун-ю frame через 10мс, интервал должен быть и по умолчанию в методе он 4мс!
    const id = setInterval(frame, 10);
    function frame() {
        // где 300 это наше конечное знач-е в px, вычислили это исходя из размеров элем-а и поля wrapper где он наход-ся
        // и соот. когда мы дойдем до этой отметки наша аним-я остан-ся
        if(pos == 300) {
            // очищаем, т.е. останав-м нашу анимацию
            clearInterval(id);
        } else {
            // увелич-м нашу поз-ю на +1 каждый раз
            pos++;
            // далее двигаем наш элемент, для этого испол- inline стили
            elem.style.top = pos + 'px';
            elem.style.left = pos + 'px';
        }
    }
}
// запускаем триггер на клик по кнопке на нашей анимации
btn.addEventListener('click', myAnimation);

// но чаще всего все же анимация делается у нас в css, подвяз-я к каким-то классам и уже потом мы при помощи js скриптом
// меняем эти классы для элементов, как в пред-м уроке с табами и fade анимацией!
