'use strict';
/* Практика. Используем события на странице проекта
Задания на урок:

1) Реализовать функционал, что после заполнения формы и нажатия кнопки "Подтвердить" - 
новый фильм добавляется в список. Страница не должна перезагружаться.
Новый фильм должен добавляться в movieDB.movies.
Для получения доступа к значению input - обращаемся к нему как input.value;
P.S. Здесь есть несколько вариантов решения задачи, принимается любой, но рабочий.

2) Если название фильма больше, чем 21 символ - обрезать его и добавить три точки

3) При клике на мусорную корзину - элемент будет удаляться из списка (сложно)

4) Если в форме стоит галочка "Сделать любимым" - в консоль вывести сообщение: 
"Добавляем любимый фильм"

5) Фильмы должны быть отсортированы по алфавиту */

// Событие DOMContentLoaded – браузер полностью загрузил HTML, было построено DOM-дерево, 
// но внешние ресурсы, такие как картинки <img> и стили, могут быть ещё не загружены.
// Событие load – браузер загрузил HTML и внешние ресурсы (картинки, стили и т.д.).
document.addEventListener("DOMContentLoaded", () => {
    const movieDB = {
        movies: [
            "Логан",
            "Лига справедливости",
            "Ла-ла лэнд",
            "Одержимость",
            "Скотт Пилигрим против..."
        ]
    };
    
    const adv = document.querySelectorAll('.promo__adv img'), 
    poster = document.querySelector('.promo__bg'),
    genre = poster.querySelector('.promo__genre'),
    movieList = document.querySelector('.promo__interactive-list'),
    // форма у котрой есть класс add
    addForm = document.querySelector('form.add'),
    addInput = addForm.querySelector('.adding__input'),
    checkbox = addForm.querySelector('[type="checkbox"]'),
    // моя доработка, созд. элемент где будет появ-ся сооб-е
    addErrorInput = document.createElement('div');

    // моя доработка, помещаю этот элемент после Input и меняю цвет
    addInput.after(addErrorInput);
    addErrorInput.style.cssText = 'color:red;';
    

    // навесим обработчик событий на нашу форму, на отправку данных, т.е submit
    addForm.addEventListener('submit', (event) => {
        // здесь нам понадобится объект события, т.к. нужно отменить 
        // станд-е поведение браузера, т.е. перез-ку при отправке данных
        event.preventDefault();
        // теперь нам нужно узнать что ввел польз-ль и поставил ли "галочку"
        // input.value дает нам доступ к внутр-м input, т.е. к значению что ввел польз-ль
        let newFilm = addInput.value;
        // .checked узнаем отмечен ли чекбокс, возвр-т булиновое знач-е
        // true - когда отмечено и false - когда нет
        const favorite = checkbox.checked;
        // делаем условие чтобы действие выпол-сь только тогда когда input заполнен(т.е. когда он true)
        if (newFilm) {
            // 2) Если название фильма больше, чем 21 символ - обрезать его и добавить три точки
            if (newFilm.length > 21) {
                // Метод substring() возвращает подстроку строки между двумя индексами
                newFilm = `${newFilm.substring(0, 22)}...`;
            }
            // 4) "Добавляем любимый фильм" в консоль
            if (favorite) {
                console.log('Добавляем любимый фильм');
            }

           // теперь нам нужно поместить наш фильм в нашу базу данных с фильмами и отсор-м их по алфавиту
            movieDB.movies.push(newFilm);
            // заменим эту стр-ку кода movieDB.movies.sort(); след-й: и у нас все фун-и начин-т переис-ся
            sortArr(movieDB.movies);
            // созд-м наши новые элементы на стр-це
            createMovieList(movieDB.movies, movieList);
        } else {
            addErrorInput.textContent = 'Enter the name of movies!';
        }

        // в конце нам нужно очистить нашу форму от введенных данных, испол-м метод reset()
        // обратимся при этом к элементу на котором происходит событие event.target
        event.target.reset();
    });

    // создадим отдел-ю фун-ю по удалению рекламы со стр-цы испол-я след-й синтаксис
    const deleteAdv = (arr) => {
        adv.forEach(item => {
            item.remove();
        });
    };

    // создадим фун-ю по изменениям на стр-це
    const makeChanges = () => {
        // 2) Изменить жанр фильма, поменять "комедия" на "драма"
        genre.textContent = 'Драма';
        // 3) Изменить задний фон постера с фильмом на изображение "bg.jpg"
        poster.style.background = 'url(img/bg.jpg)';
    };

    // создадим отдел-ю фун-ю по сортир-ке массивов у нас на стр-це
    const sortArr = (arr) => {
        arr.sort();
    };
    // вызов-ь эту фун-ю и заодно и переп-м эту строку прошл. кода  movieDB.movies.sort();
   
    // создадим более универс-ю функц-ю, чтобы мы могли ее переисп-ть в будущем, куда поместим
    // функционал по созд-ю новых элементов в фильмах
    function createMovieList(films, parent) {
        // films - это наши фильмы с кот-ми будет работ-ть наша фун-я
        // parent - какой родит. блок на странице будет испол-ть наши фильмы
        // очистка-удаление присвоением пустой строки
        parent.innerHTML = '';
        // отсортир-м фильмы
        sortArr(films);
        // Добавить нумерацию выведенных фильмов 
        // метод .innerHTML также позволяет нам и получать элементы со стр-цы в HTML формате
        // это будет у нас функционал по созд-ю новых элементов в фильмах
        films.forEach((film, i) => {
            parent.innerHTML += `
                <li class="promo__interactive-item">${i + 1}. ${film}
                    <div class="delete"></div>
                </li>
            `;
        });
        // 3) При клике на мусорную корзину - элемент будет удаляться из списка
        // если мы хотим навесит на раз-ные элементы одно и тоже событие то испол forEach
        // для этого нам понад-ся 2 аргум-та, btn - это кнопки корзиночки и i - нумерация
        // т.к. нам нужно знать номер по порядку элемента что нужно нам удалить
        // т.к. массив содер-т элементы строго по порядку
        document.querySelectorAll('.delete').forEach((btn, i) => {
            // обращ-ся к каждой корзинке внутри и навешиваем на нее обраб-к события "клика"
            btn.addEventListener('click', () => {
                // удал-м элемент со страницы
                btn.parentElement.remove();
                // и с базы данных в нашем обьекте, испол-м метод splice
                // где i это номер который переб-ся и с которого нам нужно начать
                // а 2-й арг-т это сколько нам нужно удалить элементов из массива под этим номером
                movieDB.movies.splice(i, 1);
                // перест-м правильно нумерацию фильмов после удаления
                createMovieList(films, parent);
            });
        });
    }
    
    // все вызовы наших фун-й теперь распол-м в одном месте, вызовы должны быть уже после обьяв-я фун-й
    // аргумент будет опред-ся только в момент вызова фун-и
    deleteAdv(adv);
    makeChanges();
    createMovieList(movieDB.movies, movieList);
    // sortArr(movieDB.movies);    // вызов сортир-ки перен-м в createMovieList

});



