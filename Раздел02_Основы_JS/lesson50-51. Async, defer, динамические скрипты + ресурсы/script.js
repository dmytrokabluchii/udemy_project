// Lesson 50. Async, defer, динамические скрипты

// Когда браузер загружает HTML и доходит до тега <script>...</script>, он не может продолжать строить DOM. 
// Он должен сначала выполнить скрипт. Это ведёт к двум важным проблемам:
// 1. Скрипты не видят DOM-элементы ниже себя, поэтому к ним нельзя добавить обработчики и т.д.
// 2. Если вверху страницы объёмный скрипт, он «блокирует» страницу. Пользователи не видят содержимое страницы, 
// пока он не загрузится и не запустится. Решение разм-ть скрипт внизу стр-цы далеко от идеально.
// Например, браузер замечает скрипт (и может начать загружать его) только после того, как он полностью загрузил 
// HTML-документ. В случае с длинными HTML-страницами это может создать заметную задержку.
// К счастью, есть два атрибута тега <script>, которые решают нашу проблему: defer и async.

// Атрибут defer сообщает браузеру, что он должен продолжать обрабатывать страницу и загружать скрипт в 
// фоновом режиме, а затем запустить этот скрипт, когда DOM дерево будет полностью построено.
// пропис-ся в Html и имеет след-й вид: <script defer src="script.js"></script>
const p = document.querySelectorAll('p');
console.log(p);
// Скрипты с defer никогда не блокируют страницу.
// Скрипты с defer всегда выполняются, когда дерево DOM готово, но до события DOMContentLoaded.
// Отложенные с помощью defer скрипты сохраняют порядок относительно друг друга, как и обычные скрипты.
// Поэтому, если сначала загружается большой скрипт, а затем меньшего размера, то последний будет ждать.
// Атрибут defer предназначен только для внешних скриптов, т.е он будет проигнорирован, если в теге <script> нет src!!!

// Атрибут async означает, что скрипт абсолютно независим:
// Страница не ждёт асинхронных скриптов, содержимое обрабатывается и отображается.
// Событие DOMContentLoaded и асинхронные скрипты не ждут друг друга.
// Так что если у нас есть несколько скриптов с async, они могут выполняться в любом порядке.
// <script async src="script.js"></script>
// <script async src="test.js"></script> 
// То, что первое загрузится – запустится в первую очередь! Поетому с async нужно быть аккурат-ми!

//  также мы можем создать тег <script></script> на нашей JS странице с кодом. Это назыв-ся динамически загруж-м скриптом!
// и по умолчанию они ведет себя как async
// const script = document.createElement('script');
// далее чтобы установ-ть атрибут src(наш путь), мы должны отредак-ть наш созд-й script
// script.src = "test.js";
// мы также можем менять порядок загрузки скриптов и сделать это нужно перед тем как поместим его на стр-цу
// и таким образом он будет вести себя как обычный скрипт помещ-й на стр-цу
// script.async = false;
// и так как элемент выше пока есть только в нашем JS скрипте нам нужно поместить его на стр-цу, в ее конец
// document.body.append(script);

// и чтобы увидеть разницу созд-м след-ю функ-ю
function loadScript(src) {
    const script = document.createElement('script');
    // изменим при этом путь с скрипту
    script.src = src;
    script.async = false;
    document.body.append(script);
}
// теперь подгружаем скрипт выше и в () проп-м адрес нашего скрипта
loadScript("test.js");
// а в след-ю строчку адресс другого скрипта
loadScript("some.js");
// и теперь за счет того что мы устан-ли script.async = false; они будут выпол-ся друг за другом!
// и если бы мы не устан-ли script.async = false; то поряд загрузки мог бы изменится(видно на бол-х скриптах)!
// И такие способы испол-ся динамических скриптов довольно частое явление!



