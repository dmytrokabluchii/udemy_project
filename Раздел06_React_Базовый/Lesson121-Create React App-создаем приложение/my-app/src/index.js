// Импорт библ-ку react, и в данной версии это нужно делать только в этом файле(index.js), а не как в старых версиях в каждый .js файл
import React from 'react';
// Импорт библ-ки react-dom, нужна для работы react
import ReactDOM from 'react-dom/client';
import './index.css';
// Импортир-файл App.js, при этом .js не указываем, Webpack и так поймет, где App это импор-я функция из файла
import App from './App';

// Создаем html-tag с внутр-ми испол-я синтакси react и помещаем его в перем-ю elem
// Тем самым мы смешиваем html и js, это удобно(т.к. мы можем сразу пропис-ть и логику) и это главная особенность JSX
const elem = <h2>Hello World!</h2>;

// Также вариант выше мы можем переписать без испол-я JSX, как в обычном JS
// где 1-м арг-м идет назв-е эл-ты в верстке(тег h2), 2-м идет назв-е класса(если его нет то ставим null), и в 3-м идет содер-е нашего тега
// const elem2 = React.createElement('h2', null, 'Hello World2!');
// Вместо null можно передать и объект с именем класса
// const elem = React.createElement('h2', {className: 'greetings'}, 'Hello World2!');
// И в таком вариате Babel у нас уже работать не будет, он просто отправит без обработки файл


// библ-ки react-dom(вытаскивается выше из клиентсой части) и созд-т корневой узел, испол-я команду createRoot,
// далее указ-м селектор('root') куда хотим поместить наше созд-е прил-е
const root = ReactDOM.createRoot(document.getElementById('root'));
// И когда у нас созд-ся корень прил-я, испол-я команду render отрисовываем струк-ру нашего прилож-я
// Эта команда (root.render) в ReactDOM должна вызыв-ся только один раз на самом верхнем уровне прилож-я
root.render(
  // Поместим далее нашу стр-ру(элемент у нас) на страницу
  elem
  // <React.StrictMode>
  //   <App />
  // </React.StrictMode>
);

// А все остал-е прилож-е мы будем собирать по отдел-м файлам и заключать в фун-ю, например как импортир-я фун-я App
