'use strict';
// path - это технич-я перем-я нужная для правильной работы
let path = require('path');
// Объект с различными настройками
module.exports = {
  // 1. mode: - это режим в котором будем работать наш Webpack(их всего 2)
  mode: 'development',
  // 2. entry: - данное св-во содержит тот файл с которого мы будем начинать;
  entry: './js/script.js',
  // 3. output: - файл выхода задается в виде объекта
  output: {
    // имя файла
    filename: 'bundle.js',
    // куда складываем, где __dirname - позволяет получить корень нашей папки и далее идет путь куда
    path: __dirname + '/dist/js'
  },
  // 4. watch: если стоит в позиции true то webpack(после того как был вызван) будет отслеживать изменения файлов
  watch: true,
  // 5. "source-map"- технология кот-я хранит инфо об исход-х и месторас-и кода
  devtool: "source-map",
  // 6. Модули и их настр-ка, тут можно устан-ть Babel, TypeScript, SASS etc как модуль webpack
  // Настройки Babel в модулях(с такой настройкой можно не использовать babel.config.json), 
  // импортиривана внутрь webpuck. Далее идут какие модули мы будем испол-ть.
  module: {
    // Правила которые будут дейст-ть на опред-е файлы
    rules: [
      {
        // Находим наши js файлы(в виде регул-х выражений)
        test: /\.m?js$/,
        // Какие файлы мы исключаем из этой выборки
        exclude: /(node_modules|bower_components)/,
        // Как и что мы будем испол-ть
        use: {
          // Техн-я loader будет связывать наш webpuck вместе с babel(его нужно доустановить)
          loader: 'babel-loader',
          // Опции, кот-е мы будем испол-ть
          options: {
            // Присет кот-й мы будем испол-ть(preset-env самый востр-й на данный момент)
            presets: [['@babel/preset-env', {
              // Далее внутри мы модем его еще более настроить под себя
              // Включаем св-во debug, кот-е прямо во время компиляции позволяет увидеть 
              // что происходит, возможные проблемы и тд, ставим true когда хочем это видеть
                debug: true,
                // И чтобы подключить все возможные полифилы нам нужна будет еще одна библиотека corejs
                corejs: 3,
                useBuiltIns: "usage"
            }]]
          }
        }
      }
    ]
  }
};



// 1.   mode: 'development'
// - development: это режим разработки, здесь плагинов меньше и он работает быстрее;  
// - production: режим для создания продукта, устав-м его тогда когда закончим уже продукт, работает чуть медленеее, 
// но содержит в себе инструм-ты по оптимизации кода, это режим для конечной сборки продукта. 
// Перечис-е на сайте плагины уже вкл-ны в webpack и перечис-ть их не нужно;
// подроб-е: https://webpack.js.org/configuration/mode/

// 2. entry: './js/script.js'
// entry - данное св-во содержит тот файл с которого мы будем начинать;
// Если бы мы испол-ли вариант без конфига, то это был бы файл index.js из src. Обычно в нем пропис-ся все зависим-ти
// require или import из нового стандарта. В будущем если мы будем испол-ть несколько файлов то нужно будет создать объект

// 3. output: { filename: 'bundle.js', path: __dirname + '/dist/js' }
// output: - файл выхода задается в виде объекта, здесь конфигур-м тот файл что получится в итоге, где: 
// filename: имя файла; 
// path: куда складываем, а __dirname - позволяет получить корень нашей папки и далее идет путь куда

// 4. watch: true
// Eсли стоит в позиции true то webpack(после того как был вызван) будет отслеживать изменения файлов
// и в автом-м режиме будет пересобирать проект когда мы сохран-м измен-е файлы, данный параметр можно донастраивать(в конфиг-и)

// 5. devtool: "source-map",
// "development tools" или сокращённо "DevTools") - это программы, которые позволяют создавать, тестировать и 
// отлаживать (debug) программное обеспечение. "source-map"- технология кот-я хранит инфо об исход-х и месторас-и кода
// Обычно данный параметр устан-ся именно в варианте: devtool: "source-map"

// 6. module: {} - Модули и их настр-ка, тут можно устан-ть Babel, TypeScript, SASS etc как модуль webpack
// Babel Установка:
// npm install --save-dev @babel/core @babel/cli @babel/preset-env
// babel-loader Установка:
// npm i --save-dev babel-loader

// core-js Установка:
// npm i --save-dev core-js
// Документация как пользоваться: https://github.com/zloirock/core-js

// es6-promise polifill Инфо: https://www.npmjs.com/package/es6-promise   Установка:
// npm install es6-promise
// Далее в наш script.js файл в самом его начале устанав-м Auto-polyfill
// require('es6-promise').polyfill();

// Если нам нужно установить отдельный полифил, например foreach, ищем его на сайте npmjs.com и устанав-м
// npm i nodelist-foreach-polyfill
// Далее импртируем эту структуру к себе в проект(подр. инфа на https://www.npmjs.com/package/nodelist-foreach-polyfill)
// import 'nodelist-foreach-polyfill';
// Выше мы импортируем "файлик" которого как нет в нашем проекте и это очень важная особенность! 
// Тоже самое можно делать и при подключении других пакетов из npm, например слайдера и тд
// Нам не нужно его качать, потом помещать к себе в проект, подключать отдел-м скриптом
// Мы просто через npm его устанав-м в себе в проект и далее через import подкл-м его к себе в проект
// import 'slick-slider' , где в '' мы пишем название установл. npm пакета
// В итоге на выходе у нас будет один js-файл с подл-ми зависимостями и такой способ нужно использовать в будущем!



// - npm install webpack webpack-cli --save-dev - команда по установке webpack! 
// Переодически нужно повторять если будут ошибки в консоли
// - npx webpack - для запуска webpack-конфигаратора
// - npx json-server db.json - Команда запуска JSON-Server(запускаем в доп. открытом bash-терминале)