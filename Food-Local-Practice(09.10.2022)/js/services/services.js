// Lesson 90. Получение данных с сервера. Async/Await (ES8)
// Фун-я postDada настр-т наш запрос, посылает его на сервер(через fetch), получ-т ответ от сервера(удачный или нет) 
// и потом транфор-м этот ответ в json. На данном этапе мы имеем асинх-й код и что-бы эта фун-я правильно работала 
// и не выдавала ошибок нам нужен как бы "синх-й" код, тут нам и поможет констр-я Async/Await(подр-е в коде ниже).
// async - ставит-ся перед функ-й и делает ее асинх-й, а await - значит "подожди", т.е. он ставится перед той опрацией(кодом)
// выпол-е кода которой нужно дождаться, например подождать пока не прийдет данные в перем-ю res от сервера в методе fetch.
// Испол-м синтаксис Function Expression, т.е. присв-е фун-и в обычную переменную, где url соот адресс, 
// а data - данные кот-е будут постится в этой функ-и
const postDada = async (url, data) => {
    // Во внутрь перем-й поместим промис кот-й возвр-ся от fetch()
    const res = await fetch(url, {
        method: "POST",
        headers: {
            'Content-type': 'application/json'
        },
        // 
        body: data
    });
    // В перем-й res у нас будет наход-ся промис, кот-й мы обработ-м уже как json-формат
    // Мы не знаем каким большим будет промис(т.е. объект с данными что вернется) и сколько времени нужно будет чтобы
    // перевести его в обычный объект и чтобы додж-ть выпол-я этой части кода испол-и и тут await перед перем-й res
    return await res.json();
};

// Созд-м фун-ю для получ-я наших карточек
async function getResource (url) {
    // Тут мы просто делаем запрос через fetch() и дожидаемся его окончания
    let res = await fetch(url);
    // Promise возвращаемый вызовом fetch() не перейдёт в состояние "отклонено" из-за ответа HTTP, т.е. не выдаст ошибку!!!
    // и этот момент нам нужно предусмотреть и сделать спец. условие
    if (!res.ok) {
        // здесь мы познакомимся с объектом ошибки new Error, во внутрь которой () помещаем текст ошибки
        // и чтобы эта ошибка выпала из фун-и есть спец. оператор throw, т.е. мы выкидываем новую ошибку
        throw new Error(`Could not fetch ${url}, status: ${res.status}`);
    }
    // трансфор-м данные получ-е выше с перем-й в обычный json-объект
    return await res.json();
}

export {postDada};
export {getResource};